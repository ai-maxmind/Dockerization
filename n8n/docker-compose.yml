version: "3.9"

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/dynamic.yml"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpChallenge.entryPoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/acme/acme.json"
      - "--api.dashboard=true"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./traefik/traefik.yml:/traefik.yml:ro
      - ./traefik/dynamic.yml:/dynamic.yml:ro
      - ./traefik/acme:/acme
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${N8N_HOST}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=traefik-auth@file"
    networks:
      - proxy

  postgres:
    image: postgres:15-alpine
    container_name: n8n_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: ${TZ}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal

  redis:
    image: redis:7-alpine
    container_name: n8n_redis
    restart: unless-stopped
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redisdata:/data
    networks:
      - internal

  n8n:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_VERSION: 18
        N8N_VERSION: latest
        BUILD_DATE: ${BUILD_DATE:-$(date -u +%Y-%m-%dT%H:%M:%SZ)}
        VCS_REF: ${VCS_REF:-manual}
    container_name: n8n
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      N8N_HOST: ${N8N_HOST}
      N8N_PROTOCOL: https
      WEBHOOK_URL: ${WEBHOOK_URL}
      EXECUTIONS_PROCESS: main
      EXECUTIONS_PROCESS_TIMEOUT: 3600
      GENERIC_TIMEZONE: ${TZ}
      NODE_ENV: production
    volumes:
      - n8n_data:/home/n8n/.n8n
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${N8N_HOST}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=myresolver"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    networks:
      - proxy
      - internal

  postgres-backup:
    image: postgres:15
    container_name: postgres_backup
    restart: unless-stopped
    volumes:
      - ./backup_postgres.sh:/usr/local/bin/backup_postgres.sh:ro
      - ./backups:/backups
    env_file:
      - .env
    entrypoint: >
      bash -c "chmod +x /usr/local/bin/backup_postgres.sh &&
               echo '0 2 * * * /usr/local/bin/backup_postgres.sh >> /backups/cron.log 2>&1' > /etc/cron.d/pg_backup &&
               crontab /etc/cron.d/pg_backup &&
               cron -f"
    networks:
      - internal

  postgres-auto-restore:
    image: postgres:15
    container_name: postgres_auto_restore
    restart: unless-stopped
    volumes:
      - ./auto_restore_on_failure.sh:/usr/local/bin/auto_restore_on_failure.sh
      - ./restore_postgres.sh:/usr/local/bin/restore_postgres.sh
      - ./backups:/backups
    env_file:
      - .env
    entrypoint: >
      bash -c "chmod +x /usr/local/bin/auto_restore_on_failure.sh /usr/local/bin/restore_postgres.sh &&
               /usr/local/bin/auto_restore_on_failure.sh"
    depends_on:
      - postgres
      - postgres-backup
    networks:
      - internal
volumes:
  pgdata:
  redisdata:
  n8n_data:

networks:
  proxy:
    external: false
  internal:
    internal: true
