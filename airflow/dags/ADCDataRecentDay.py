import configparser, os, sys, time, traceback, glob, gzip, csv
from datetime import datetime, timedelta
import pandas as pd, numpy as np
from airflow import DAG
from airflow.decorators import task
from pendulum import timezone
from ftplib import all_errors as FTP_ERRORS

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from modules import Utils, FTPServer, OracleDB


local_tz = timezone("Asia/Ho_Chi_Minh")


def loadConfig():
    config = configparser.ConfigParser()
    config.read(Utils.findConfigFile("env.ini"))
    return config


def deleteFile(filePath, fileName):
    if os.path.exists(filePath):
        for file in glob.glob(os.path.join(filePath, fileName)):
            try:
                os.remove(file)
                print(f"Deleted file: {file}")
            except Exception as e:
                print(f"Error deleting {file}: {e}")


def downloadADC7Files(cfg, remoteDir, localDir, days=9, count=7):
    ftp = FTPServer(cfg)
    downloaded, found = [], 0
    maxRetries = 3

    try:
        ftp.connectFTP()
    except Exception as e:
        print(f"[ERROR] Kh√¥ng th·ªÉ k·∫øt n·ªëi FTP ban ƒë·∫ßu: {e}")
        return None

    for i in range(1, days + 1):
        if found >= count:
            break

        dateStr = (datetime.today() - timedelta(days=i)).strftime("%Y%m%d")
        fname = f"ADC_UPDATE_{dateStr}.txt.gz"
        filePath = os.path.join(localDir, fname)

        for attempt in range(1, maxRetries + 1):
            try:
                ok = ftp.downloadFile(remoteDir, fname, localDir)
                if ok:
                    downloaded.append(filePath)
                    found += 1
                    print(f"[INFO] ‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {fname}")
                    break

                else:
                    print(f"[WARN] ‚ö†Ô∏è T·∫£i th·∫•t b·∫°i {fname} (l·∫ßn {attempt}/{maxRetries})")
                    time.sleep(3)

            except FTP_ERRORS as fe:
                print(f"[FTP ERROR] ‚ùå L·ªói FTP khi t·∫£i {fname}: {fe}")
                try:
                    ftp.disconnectFTP()
                    time.sleep(2)
                    ftp.connectFTP()
                    print("[INFO] üîÑ ƒê√£ reconnect FTP th√†nh c√¥ng")
                except Exception as reconnect_err:
                    print(f"[CRITICAL] üö´ Kh√¥ng th·ªÉ reconnect FTP: {reconnect_err}")
                    break 

            except (OSError, IOError) as io_err:
                print(f"[IO ERROR] üíæ L·ªói ghi file {fname}: {io_err}")
                break

            except Exception as e:
                print(f"[UNKNOWN ERROR] ‚ö° L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫£i {fname}: {e}")
                print(f"‚Ü≥ Lo·∫°i l·ªói: {type(e).__name__}")
                break

        else:
            print(f"[WARN] üö´ B·ªè qua {fname} sau {maxRetries} l·∫ßn th·∫•t b·∫°i")

    try:
        ftp.disconnectFTP()
    except Exception as e:
        print(f"[WARN] ‚ö†Ô∏è L·ªói khi ng·∫Øt k·∫øt n·ªëi FTP: {e}")

    print(f"‚úÖ T·ªïng s·ªë file t·∫£i th√†nh c√¥ng: {found}/{count}")
    return downloaded if downloaded else None

def safeInt(val):
    try:
        return int(str(val).strip())
    except:
        return 0


def streamADCFile(filePath, filePattern, batchSize=10000):
    files = sorted(glob.glob(os.path.join(filePath, filePattern)), reverse=True)
    if not files:
        print("[WARN] ‚ùó Kh√¥ng t√¨m th·∫•y file n√†o kh·ªõp v·ªõi pattern.")
        return

    latest = files[0]
    otherFiles = files[1:]

    allISDN = set()
    isdnWith3G4G5G = set()

    for f in otherFiles:
        print(f"[INFO] üîç X·ª≠ l√Ω file ph·ª•: {f}", flush=True)
        try:
            with gzip.open(f, 'rt', encoding='utf-8') as fp:
                reader = csv.DictReader(fp, delimiter='|')
                for row in reader:
                    isdn = row.get("isdn")
                    if not isdn:
                        continue
                    allISDN.add(isdn)
                    d3 = safeInt(row.get("data_3g", 0))
                    d4 = safeInt(row.get("data_4g", 0))
                    d5 = safeInt(row.get("data_5g", 0))
                    if d3 > 0 or d4 > 0 or d5 > 0:
                        isdnWith3G4G5G.add(isdn)
        except Exception as e:
            print(f"[WARN] ‚ö†Ô∏è B·ªè qua file ph·ª• {f}: {e}")

    only2gSet = allISDN - isdnWith3G4G5G
    del allISDN, isdnWith3G4G5G  

    print(f"[INFO] üì• ƒêang stream file ch√≠nh: {latest}")
    batch = []

    try:
        with gzip.open(latest, 'rt', encoding='utf-8') as fp:
            reader = csv.DictReader(fp, delimiter='|')
            for row in reader:
                d2 = safeInt(row.get("data_2g", 0))
                d3 = safeInt(row.get("data_3g", 0))
                d4 = safeInt(row.get("data_4g", 0))
                d5 = safeInt(row.get("data_5g", 0))
                volte = safeInt(row.get("volte", 0))

                isdn = row.get("isdn", "")
                only2G = int(isdn in only2gSet and d3 == 0 and d4 == 0 and d5 == 0)


                batch.append({
                    "isdn": isdn,
                    "imei": row.get("imei", ""),
                    "device_category": row.get("device_category", ""),
                    "data_2g": d2,
                    "data_3g": d3,
                    "data_4g": d4,
                    "data_5g": d5,
                    "volte": volte,
                    "only_2g": only2G
                })

                if len(batch) >= batchSize:
                    yield batch
                    batch = []

            if batch:
                yield batch

    except Exception as e:
        print(f"[CRITICAL] üö® L·ªói t·ªïng th·ªÉ: {e}")

    print("[INFO] ‚úÖ ƒê√£ k·∫øt th√∫c streamADCFile_batches.")

def runStep(name, func, *a, **kw):
    t0 = time.perf_counter()
    print(f"{name} ...")
    r = func(*a, **kw)
    print(f"{name} OK ({time.perf_counter() - t0:.2f}s)")
    return r


@task
def importADCData():
    start = time.perf_counter()
    print("=== START import ADC Data ===")
    try:
        cfg = runStep("Load config", loadConfig)
        ftp, db_cfg = cfg["ftp_server1"], cfg["crm_db"]
        if not (ftp and db_cfg):
            print("‚ùå Missing cfg")
            return False

        runStep("Download files", downloadADC7Files, ftp, "/all/ADC", "downloads")
        db = runStep("Connect DB", OracleDB, db_cfg)
        db.connectDB()

        runStep("Drop index", db.dropIndex, "ADC_DATA_INDEX")
        runStep("Delete old", db.truncateTable, "ADC_DATA")

        for batch in streamADCFile("downloads", "ADC_UPDATE_*.txt.gz"):
            if batch:
                db.insertData(
                    "ADC_DATA",
                    ['isdn','imei','device_category','data_2g','data_3g','data_4g','data_5g','only_2g','volte'],
                    batch
                )

        runStep("Create index", db.createIndex, "ADC_DATA_INDEX", "ADC_DATA", ["ISDN"])
        runStep("Close DB", db.closeDB)
        runStep("Cleanup", deleteFile, "downloads", "ADC_UPDATE_*.txt.gz")

        print(f"‚úÖ Done in {time.perf_counter() - start:.2f}s")
        return True

    except Exception as e:
        print(f"‚ùå {e}\n{traceback.format_exc()}")
        return False
    finally:
        print("=== END importADCData ===\n")


defaultArgs = {
    "owner": "mobifone",
    "depends_on_past": False,
    "retries": 2,
    "retry_delay": timedelta(minutes=2),
}

with DAG(
    dag_id="ADCDataRecentDay",
    default_args=defaultArgs,
    description="Import d·ªØ li·ªáu ADC trong 7 ng√†y g·∫ßn nh·∫•t",
    schedule_interval="0 0 * * *",   
    start_date=datetime(2025, 9, 25, tzinfo=local_tz),
    catchup=False,
    tags=["oracle", "ftp", "excel"],
) as dag:
    importADCData()
